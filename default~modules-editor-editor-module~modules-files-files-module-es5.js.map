{"version":3,"sources":["webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/fuse.js/dist/fuse.esm.js","webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/nanoid/format.browser.js","webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/shortid/index.js","webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/shortid/lib/alphabet.js","webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/shortid/lib/build.js","webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/shortid/lib/generate.js","webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/shortid/lib/index.js","webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/shortid/lib/is-valid.js","webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/shortid/lib/random/random-byte-browser.js","webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/shortid/lib/random/random-from-seed.js","webpack:///home/runner/work/fcc-markdown-previewer/fcc-markdown-previewer/node_modules/shortid/lib/util/cluster-worker-id-browser.js","webpack:///src/app/services/file.service.ts"],"names":["isArray","value","Array","getTag","INFINITY","baseToString","result","toString","isString","isNumber","isBoolean","isObjectLike","isObject","isDefined","undefined","isBlank","trim","length","Object","prototype","call","EXTENDED_SEARCH_UNAVAILABLE","INCORRECT_INDEX_TYPE","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","MISSING_KEY_PROPERTY","name","INVALID_KEY_WEIGHT_VALUE","hasOwn","hasOwnProperty","KeyStore","keys","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","push","id","keyId","JSON","stringify","path","src","createKeyPath","createKeyId","Error","split","join","get","list","arr","deepGet","index","i","len","MatchOptions","includeMatches","findAllMatches","minMatchCharLength","BasicOptions","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","FuzzyOptions","location","threshold","distance","AdvancedOptions","useExtendedSearch","getFn","ignoreLocation","ignoreFieldNorm","Config","SPACE","norm","mantissa","cache","Map","numTokens","match","has","n","parseFloat","Math","sqrt","toFixed","set","clear","FuseIndex","isCreated","setIndexRecords","docs","records","_keysMap","doc","docIndex","_addString","_addObject","size","splice","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","setKeys","map","setSources","create","parseIndex","data","transformMatches","matches","indices","refIndex","transformScore","computeScore","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","start","end","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","finish","bitArr","j","charMatch","charAt","isMatch","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","allIndices","totalScore","hasMatches","BaseMatch","getMatch","multiRegex","singleRegex","exp","ExactMatch","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","searchIn","IncludeMatch","searchers","searchersLen","SPACE_RE","OR_TOKEN","parseQuery","query","filter","results","queryItem","found","searcher","token","isMultiMatch","isSingleMatch","MultiMatchSet","Set","type","ExtendedSearch","numMatches","qLen","pLen","constructor","_","registeredSearchers","register","createSearcher","searcherClass","condition","LogicalOperator","AND","OR","KeyType","PATH","PATTERN","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","Fuse","_keyStore","setCollection","_docs","_myIndex","add","predicate","removeAt","limit","_searchStringList","_searchObjectList","_searchLogical","computeScore$1","sort","slice","format","expression","evaluate","_findMatches","getValueForItemAtKeyId","res","child","resultMap","expResults","pow","Number","EPSILON","transformers","transformer","version","config","module","exports","random","log","LN2","step","bytes","randomFromSeed","ORIGINAL","previousSeed","shuffled","reset","setCharacters","_alphabet_","unique","ind","lastIndexOf","characters","setSeed","seed","shuffle","sourceArray","targetArray","r","nextValue","characterIndex","getShuffled","lookup","alphabetShuffled","generate","REDUCE_TIME","counter","previousSeconds","build","clusterWorkerId","str","seconds","Date","now","number","loopCounter","done","isValid","seedValue","worker","workerId","newCharacters","isShortId","nonAlphabetic","RegExp","replace","test","crypto","window","msCrypto","randomByte","getRandomValues","Uint8Array","getNextValue","_seed_","FileService","localForage","files$","removeAll$","subscribe","files","setItem","FILES","then","pipe","file","params","orderBy","values","fuse","itemA","itemB","ids","providedIn"],"mappings":"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","file":"default~modules-editor-editor-module~modules-files-files-module-es5.js","sourcesContent":["/**\n * Fuse.js v6.4.1 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2020 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const n = parseFloat((1 / Math.sqrt(numTokens)).toFixed(mantissa));\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 1 : 0,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\n// Practical scoring function\nfunction computeScore$1(results, { ignoreFieldNorm = Config.ignoreFieldNorm }) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nFuse.version = '6.4.1';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport shortId from 'shortid';\nimport { StorageKeys } from '../constants/storage-keys';\nimport { File } from '../models/file';\nimport { LocalForageService } from './local-forage.service';\nimport Fuse from 'fuse.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FileService {\n  /**\n   * An observable of all the files\n   */\n  public files$ = new ReplaySubject<Record<string, File>>(1);\n\n  constructor(private localForage: LocalForageService) {\n    this.localForage.removeAll$.subscribe(() => this.files$.next({}));\n    this.files$.subscribe((files) =>\n      this.localForage.setItem<Record<string, File>>(StorageKeys.FILES, files)\n    );\n    localForage.get<Record<string, File>>(StorageKeys.FILES).then((files) => {\n      if (files) {\n        return this.files$.next(files);\n      }\n      this.files$.next({});\n    });\n  }\n\n  public get(id: string): Observable<File | undefined> {\n    return this.files$.pipe(map((files) => files[id]));\n  }\n\n  /**\n   * Creates the given file\n   */\n  public create(file: Pick<File, 'name' | 'content'>): Observable<File> {\n    const id = shortId();\n    return this.files$.pipe(\n      take(1),\n      map(\n        (files) =>\n          ({\n            ...files,\n            [id]: {\n              ...file,\n              id\n            }\n          } as Record<string, File>)\n      ),\n      tap((files) => this.files$.next(files)),\n      switchMap(() => this.get(id) as Observable<File>)\n    );\n  }\n\n  /**\n   * Updates the given file\n   */\n  public update(file: File): Observable<File> {\n    return this.files$.pipe(\n      take(1),\n      map((files) => ({ ...files, [file.id]: file })),\n      tap((files) => this.files$.next(files)),\n      switchMap(() => this.get(file.id) as Observable<File>)\n    );\n  }\n\n  /**\n   * Removes the file from localStorage\n   */\n  public remove(id: string): Observable<undefined> {\n    return this.files$.pipe(\n      take(1),\n      map((files) => {\n        delete files[id];\n        return files;\n      }),\n      tap((files) => this.files$.next(files)),\n      switchMap(() => this.get(id) as Observable<undefined>)\n    );\n  }\n  /**\n   * Removes all fields\n   */\n  public removeAll() {\n    this.files$.pipe(\n      take(1),\n      tap(() => this.files$.next({}))\n    );\n  }\n  /**\n   * Returns an observable based upon the given params.\n   */\n  public searchFiles$(params: {\n    /**\n     * The property to orderBy, defaults to name\n     */\n    orderBy: keyof File;\n    /**\n     * The search query\n     */\n    query: string;\n  }): Observable<File[]> {\n    const { query, orderBy = 'name' } = params;\n    return this.files$.pipe(\n      map(Object.values),\n      map((files) => {\n        const fuse = new Fuse(files, {\n          sortFn: orderBy\n            ? ({ item: itemA }, { item: itemB }) =>\n                // TODO: test order check!\n                itemA[orderBy] > itemB[orderBy] ? -1 : 1\n            : undefined,\n\n          includeScore: true,\n          keys: [\n            {\n              name: 'name' as keyof File,\n              weight: 0.7\n            },\n            {\n              name: 'content' as keyof File,\n              weight: 0.3\n            }\n          ]\n        });\n        if (query) {\n          return fuse.search<File>(query).map(({ item }) => item);\n        }\n\n        if (orderBy) {\n          return files.sort((a, b) => (a > b ? -1 : 1));\n        }\n        return files;\n      })\n    );\n  }\n\n  /**\n   * Removes multiple, then returns the still existing\n   */\n  public removeMultiple(ids: string[]): Observable<Record<string, File>> {\n    this.files$\n      .pipe(\n        take(1),\n        map((files) => {\n          ids.forEach((id) => delete files[id]);\n          return { ...files };\n        })\n      )\n      .subscribe((files) => this.files$.next(files));\n    return this.files$;\n  }\n}\n"]}